#include<iostream> 
using namespace std; 
struct node 
{ 
 public: 
  int count; 
  string name; 
  node* child[10],*next; 
}; 
class LL 
{ 
 public: 
  node *root,*nnode,*temp; 
  int i,j,l; 
  void create() 
  { 
   root=new node; 
   cout<<"\nEnter the name of book:"; 
   cin>>root->name; 
   cout<<"\nEnter the no. of chapters:"; 
   cin>>root->count; 
   for(i=1;i<=root->count;i++) 
   { 
    root->child[i]=new node; 
    cout<<"Enter the chapter name:"; 
    cin>>root->child[i]->name; 
    cout<<"Enter the no. of sections:"; 
    cin>>root->child[i]->count; 
    for(j=1;j<=root->child[i]->count;j++) 
    { 
     root->child[i]->child[j]=new node; 
     cout<<"Enter the name of sections:"; 
     cin>>root->child[i]->child[j]->name; 
     cout<<"Enter the no of subsections:"; 
     cin>>root->child[i]->child[j]->count; 
     for(l=1;l<=root->child[i]->child[j]->count;l++) 
     { 
      root->child[i]->child[j]->child[l]=new node; 
      cout<<"Enter the name of subsection:"; 
      cin>>root->child[i]->child[j]->child[l]->name; 
     } 
    } 
     
   } 
  } 
  void display() 
  { 
   cout<<"\nName of the book:-"<<root->name; 
   cout<<"\nNo. of chapters:-"<<root->count; 
   for(i=1;i<=root->count;i++) 
   { 
    cout<<"\nChapter "<<i<<":"<<endl; 
    cout<<"\t"<<root->child[i]->name<<endl; 
    for(j=1;j<=root->child[i]->count;j++) 
    { 
     cout<<"\t\tSections"<<j<<":"<<endl; 
     cout<<"\t\t\t"<<root->child[i]->child[j]->name<<endl; 
     for(l=1;l<=root->child[i]->child[j]->count;l++) 
     { 
      cout<<"\t\t\tSubsections "<<l<<":"; 
      cout<<"\t\t\t\t"<<root->child[i]->child[j]
>child[l]->name<<endl; 
cout<<"\n------------------------------------------------------------------------\n\n"; 
} 
} 
}; 
int main() 
{ 
} 
LL ob; 
ob.create(); 
ob.display(); 
return 0; 
} 
}
Explanation:This program simulates a hierarchical structure of a book, where the book consists of multiple chapters, each chapter contains several sections, and each section can have multiple subsections. 
The structure is represented using linked lists.
Node Structure:
The node struct is used to represent each entity (book, chapter, section, or subsection). Each node contains:
count: An integer representing the number of child elements (e.g., chapters, sections, or subsections).
name: A string storing the name of the book, chapter, section, or subsection.
child[10]: An array of pointers to child nodes, allowing each node to have multiple child elements (such as sections under chapters).
next: A pointer to the next node, though it is unused in this code.
Book Creation (create method):
The user is prompted to enter the details for the book, chapters, sections, and subsections.
The book node is created first. The user provides:
The name of the book.
The number of chapters in the book.
For each chapter, the user specifies:
The chapter name.
The number of sections in the chapter.
For each section, the user specifies:
The section name.
The number of subsections under that section.
The process repeats for each level (book → chapter → section → subsection).
Displaying Book Structure (display method):
The display method prints the structure of the book starting with the book's name, followed by chapters, sections, and subsections.
The program uses nested loops to display:
The book name and the number of chapters.
For each chapter, the name of the chapter and the number of sections within it.
For each section, the name and the number of subsections under that section.
The names of subsections are displayed under their respective sections.
Flow:
The main function creates an instance of the LL class, then calls the create method to input data, and finally calls the display method to print the hierarchical structure of the book.
Example Output:
If the user enters the following input:
mathematica
Copy
Edit
Enter the name of book: Computer Science
Enter the no. of chapters: 2
Enter the chapter name: Introduction to Programming
Enter the no. of sections: 2
Enter the name of sections: Variables
Enter the no of subsections: 2
Enter the name of subsection: Data Types
Enter the name of subsection: Memory Allocation
Enter the name of sections: Functions
Enter the no of subsections: 1
Enter the name of subsection: Function Declaration
Enter the chapter name: Data Structures
Enter the no. of sections: 1
Enter the name of sections: Arrays
Enter the no of subsections: 1
Enter the name of subsection: 1D Arrays
The output would look like this:

yaml
Copy
Edit
Name of the book:- Computer Science
No. of chapters:- 2

Chapter 1:
    Introduction to Programming
        Sections1:
            Variables
                Subsections 1:        Data Types
                Subsections 2:        Memory Allocation
        Sections2:
            Functions
                Subsections 1:        Function Declaration

Chapter 2:
    Data Structures
        Sections1:
            Arrays
                Subsections 1:        1D Arrays
------------------------------------------------------------------------
Conclusion:
The program helps represent the book’s structure in a tree-like manner, where each chapter can have multiple sections, and each section can have multiple subsections. Linked lists are effectively used here to create dynamic and flexible structures.








