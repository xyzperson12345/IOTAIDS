#define Max 10 
#include<iostream> 
#include<queue> 
using namespace std; 
class OBST 
{ 
 public: 
  int n,i,j,k; 
  int p[Max],q[Max],W[Max][Max],C[Max][Max],r[Max][Max]; 
     string S[Max]; 
      
 void read() 
 { 
  cout<<"\n Enter the number of keys:"; 
     cin>>n; 
     cout<<"\n Enter the keys:"; 
     for(i=1;i<=n;i++) 
     { 
      cin>>S[i]; 
     } 
      
     cout<<"\n Enter the values of successor:"; 
     for(i=1;i<=n;i++) 
     { 
      cin>>p[i]; 
     } 
      
     cout<<"\n Enter the values of unsuccessor:"; 
     for(i=0;i<=n;i++) 
     {     
      cin>>q[i]; 
     } 
 } 
  
 void display() 
 { 
  cout<<"\n The keys are:"; 
     for(i=1;i<=n;i++) 
     { 
      cout<<S[i]<<"\t"; 
     } 
     cout<<"\n The successors are:"; 
     for(i=1;i<=n;i++) 
     { 
      cout<<p[i]<<"\t"; 
     } 
     cout<<"\n The unsuccessors are:"; 
     for(i=0;i<=n;i++) 
     {     
      cout<<q[i]<<"\t"; 
     } 
 } 
  
 void create() 
 { 
  cout<<"\nFor difference 0:\n"; 
  cout<<"\nWeights\t\tCost\t\tRoot\n"; 
  for(i=0;i<=n;i++) 
  { 
   W[i][i]=q[i]; 
   C[i][i]=0; 
   r[i][i]=0; 
   cout<<W[i][i]<<"\t\t"<<C[i][i]<<"\t\t"<<r[i][i]<<endl; 
  } 
   
  cout<<"\nFor difference 1:\n"; 
  cout<<"\nWeights\t\tCost\t\tRoot\n"; 
  for(i=0;i<n;i++) 
  { 
   int j=i+1; 
   W[i][j]=p[j]+q[j]+W[i][j-1]; 
   C[i][j]=W[i][j]; 
   r[i][j]=j; 
   cout<<W[i][j]<<"\t\t"<<C[i][j]<<"\t\t"<<r[i][j]<<endl; 
  } 
   
  for(int d=2;d<=n;d++) 
  { 
   cout<<"\nFor difference "<<d<<":\n"; 
      cout<<"\nWeights\t\tCost\t\tRoot\n"; 
   for(i=0;i+d<=n;i++) 
   { 
    int j=i+d; 
    W[i][j]=p[j]+q[j]+W[i][j-1]; 
    int k=minCost(i,j); 
    C[i][j]=W[i][j]+C[i][k-1]+C[k][j]; 
    r[i][j]=k; 
    cout<<W[i][j]<<"\t\t"<<C[i][j]<<"\t\t"<<r[i][j]<<endl; 
   } 
  } 
    } 
     
    int minCost(int i,int j) 
 { 
  int min=999,h; 
  for(int k=i+1;k<=j;k++) 
  { 
   int cost=C[i][k-1]+C[k][j]; 
   if(cost<min)  
   { 
       min=cost; 
       h=k; 
   } 
  } 
  return h; 
 } 
  
 void display1() 
 { 
  queue<int>q1; 
  q1.push(0); 
  q1.push(n); 
  cout<<"\nRoot\t\tLeft child\tRight Child\n"; 
  while(!q1.empty()) 
  { 
   i=q1.front(); 
   q1.pop(); 
   j=q1.front(); 
   q1.pop(); 
   cout<<S[r[i][j]]<<"\t\t"; 
   k=r[i][j]; 
   if(r[i][k-1]==0) 
   { 
    cout<<"NULL\t\t"; 
   } 
   else 
   { 
    cout<<S[r[i][k-1]]<<"\t\t"; 
    q1.push(i); 
    q1.push(k-1); 
   } 
   if(r[k][j]==0) 
   { 
    cout<<"NULL\n"; 
   } 
   else 
   { 
    cout<<S[r[k][j]]<<"\n"; 
    q1.push(k); 
    q1.push(j); 
   } 
  }  
 } 
}; 
 
int main() 
{ 
 OBST ob; 
 ob.read(); 
 ob.create(); 
 ob.display1(); 
 return 0; 
} 
Output: 
Enter the number of keys:4 
 
 Enter the keys:do 
if 
int 
while 
 
 Enter the values of successor:3 
3 
1 
1 
 
 Enter the values of unsuccessor:2 
3 
1 
1 
1 
 
For difference 0: 
Weights         Cost            Root 
2               0               0 
3               0               0 
1               0               0 
1               0               0 
1               0               0 
 
For difference 1: 
Weights         Cost            Root 
8               8               1 
7               7               2 
3               3               3 
3               3               4 
For difference 2: 
Weights         
12              
9               
5               
Cost            
19              
12              
8               
For difference 3: 
Weights         
14              
11              
25              
19              
Cost            
For difference 4: 
Weights         
16              
Root            
Cost            
32              
Root 
1 
2 
3 
2 
2 
2 
Root 
Root 
Left child      Right Child 
if              
do              
int             
while           
do              
NULL            
NULL            
NULL            
int 
NULL 
while 
NULL 
Explanation:
This C++ program implements the Optimal Binary Search Tree (OBST) algorithm. The OBST is a binary search tree that minimizes the expected search cost for a given set of keys and their associated probabilities (successor and unsuccessful search probabilities). This algorithm is useful when constructing a binary search tree in situations where search costs vary depending on the frequency of key accesses.

Key Concepts:
Keys, Successors, and Unsuccessors:

Keys are the values to be inserted into the binary search tree.

Successors are the probabilities of successful searches for each key.

Unsuccessors are the probabilities of unsuccessful searches between each pair of keys.
Dynamic Programming Approach:
The program uses dynamic programming to find the optimal binary search tree by calculating the minimum cost of searching for each possible root node, considering all the possible ways of splitting the keys between the left and right subtrees.
Cost Calculation:
The weights represent the cumulative probabilities of the keys and unsuccessful searches.
The cost is calculated for each subtree using dynamic programming and stored in a table C[][].
The root of each subtree is recorded in a table r[][] for reconstruction.
Reconstruction of the Tree:
Once the cost table is filled, the program reconstructs the tree structure (root, left child, and right child) using the stored roots in r[][] and displays the optimal binary search tree.
Program Functions:
read():This function reads the number of keys, the keys themselves, the successors, and the unsuccessors from the user.
display():
Displays the keys, their corresponding successors, and unsuccessors.
create():
This function implements the dynamic programming approach to build the OBST.
For each possible difference (size of the subproblem), it computes the weights, costs, and roots.
It uses the minCost() function to find the root that minimizes the search cost for each subproblem.
minCost():
This function finds the root that minimizes the search cost by evaluating the costs for all possible roots in a given range of keys.
display1():
This function reconstructs and displays the tree structure (root, left child, and right child) using a queue to process each node and its corresponding left and right children.
Program Flow:
Input:
The program first asks for the number of keys, followed by the keys, successors, and unsuccessors.
Cost Calculation:
It calculates the optimal cost for constructing the binary search tree using dynamic programming, storing intermediate results in tables for weights, costs, and roots.
Tree Reconstruction:
After calculating the optimal tree, the program reconstructs the tree and prints the tree structure showing the root, left child, and right child for each node
